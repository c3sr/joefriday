// automatically generated by the FlatBuffers compiler, do not modify

package structs

import (
	flatbuffers "github.com/google/flatbuffers/go"
)
type MemInfo struct {
	_tab flatbuffers.Table
}

func GetRootAsMemInfo(buf []byte, offset flatbuffers.UOffsetT) *MemInfo {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &MemInfo{}
	x.Init(buf, n + offset)
	return x
}

func (rcv *MemInfo) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *MemInfo) Timestamp() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MemInfo) TotalRAM() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MemInfo) FreeRAM() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MemInfo) SharedRAM() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MemInfo) BufferRAM() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MemInfo) TotalSwap() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MemInfo) FreeSwap() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func MemInfoStart(builder *flatbuffers.Builder) { builder.StartObject(7) }
func MemInfoAddTimestamp(builder *flatbuffers.Builder, Timestamp int64) { builder.PrependInt64Slot(0, Timestamp, 0) }
func MemInfoAddTotalRAM(builder *flatbuffers.Builder, TotalRAM uint64) { builder.PrependUint64Slot(1, TotalRAM, 0) }
func MemInfoAddFreeRAM(builder *flatbuffers.Builder, FreeRAM uint64) { builder.PrependUint64Slot(2, FreeRAM, 0) }
func MemInfoAddSharedRAM(builder *flatbuffers.Builder, SharedRAM uint64) { builder.PrependUint64Slot(3, SharedRAM, 0) }
func MemInfoAddBufferRAM(builder *flatbuffers.Builder, BufferRAM uint64) { builder.PrependUint64Slot(4, BufferRAM, 0) }
func MemInfoAddTotalSwap(builder *flatbuffers.Builder, TotalSwap uint64) { builder.PrependUint64Slot(5, TotalSwap, 0) }
func MemInfoAddFreeSwap(builder *flatbuffers.Builder, FreeSwap uint64) { builder.PrependUint64Slot(6, FreeSwap, 0) }
func MemInfoEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT { return builder.EndObject() }
