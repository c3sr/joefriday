// automatically generated by the FlatBuffers compiler, do not modify

package flat

import (
	flatbuffers "github.com/google/flatbuffers/go"
)
type Device struct {
	_tab flatbuffers.Table
}

func GetRootAsDevice(buf []byte, offset flatbuffers.UOffsetT) *Device {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Device{}
	x.Init(buf, n + offset)
	return x
}

func (rcv *Device) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Device) Name() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Device) RBytes() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Device) RPackets() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Device) RErrs() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Device) RDrop() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Device) RFIFO() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Device) RFrame() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Device) RCompressed() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Device) RMulticast() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Device) TBytes() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Device) TPackets() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Device) TErrs() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Device) TDrop() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Device) TFIFO() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Device) TColls() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Device) TCarrier() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Device) TCompressed() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func DeviceStart(builder *flatbuffers.Builder) { builder.StartObject(17) }
func DeviceAddName(builder *flatbuffers.Builder, Name flatbuffers.UOffsetT) { builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(Name), 0) }
func DeviceAddRBytes(builder *flatbuffers.Builder, RBytes int64) { builder.PrependInt64Slot(1, RBytes, 0) }
func DeviceAddRPackets(builder *flatbuffers.Builder, RPackets int64) { builder.PrependInt64Slot(2, RPackets, 0) }
func DeviceAddRErrs(builder *flatbuffers.Builder, RErrs int64) { builder.PrependInt64Slot(3, RErrs, 0) }
func DeviceAddRDrop(builder *flatbuffers.Builder, RDrop int64) { builder.PrependInt64Slot(4, RDrop, 0) }
func DeviceAddRFIFO(builder *flatbuffers.Builder, RFIFO int64) { builder.PrependInt64Slot(5, RFIFO, 0) }
func DeviceAddRFrame(builder *flatbuffers.Builder, RFrame int64) { builder.PrependInt64Slot(6, RFrame, 0) }
func DeviceAddRCompressed(builder *flatbuffers.Builder, RCompressed int64) { builder.PrependInt64Slot(7, RCompressed, 0) }
func DeviceAddRMulticast(builder *flatbuffers.Builder, RMulticast int64) { builder.PrependInt64Slot(8, RMulticast, 0) }
func DeviceAddTBytes(builder *flatbuffers.Builder, TBytes int64) { builder.PrependInt64Slot(9, TBytes, 0) }
func DeviceAddTPackets(builder *flatbuffers.Builder, TPackets int64) { builder.PrependInt64Slot(10, TPackets, 0) }
func DeviceAddTErrs(builder *flatbuffers.Builder, TErrs int64) { builder.PrependInt64Slot(11, TErrs, 0) }
func DeviceAddTDrop(builder *flatbuffers.Builder, TDrop int64) { builder.PrependInt64Slot(12, TDrop, 0) }
func DeviceAddTFIFO(builder *flatbuffers.Builder, TFIFO int64) { builder.PrependInt64Slot(13, TFIFO, 0) }
func DeviceAddTColls(builder *flatbuffers.Builder, TColls int64) { builder.PrependInt64Slot(14, TColls, 0) }
func DeviceAddTCarrier(builder *flatbuffers.Builder, TCarrier int64) { builder.PrependInt64Slot(15, TCarrier, 0) }
func DeviceAddTCompressed(builder *flatbuffers.Builder, TCompressed int64) { builder.PrependInt64Slot(16, TCompressed, 0) }
func DeviceEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT { return builder.EndObject() }
