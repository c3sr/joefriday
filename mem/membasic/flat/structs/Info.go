// automatically generated by the FlatBuffers compiler, do not modify

package structs

import (
	flatbuffers "github.com/google/flatbuffers/go"
)
type Info struct {
	_tab flatbuffers.Table
}

func GetRootAsInfo(buf []byte, offset flatbuffers.UOffsetT) *Info {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Info{}
	x.Init(buf, n + offset)
	return x
}

func (rcv *Info) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Info) Timestamp() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Info) Active() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Info) Inactive() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Info) Mapped() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Info) MemAvailable() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Info) MemFree() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Info) MemTotal() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Info) SwapCached() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Info) SwapFree() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Info) SwapTotal() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func InfoStart(builder *flatbuffers.Builder) { builder.StartObject(10) }
func InfoAddTimestamp(builder *flatbuffers.Builder, Timestamp int64) { builder.PrependInt64Slot(0, Timestamp, 0) }
func InfoAddActive(builder *flatbuffers.Builder, Active uint64) { builder.PrependUint64Slot(1, Active, 0) }
func InfoAddInactive(builder *flatbuffers.Builder, Inactive uint64) { builder.PrependUint64Slot(2, Inactive, 0) }
func InfoAddMapped(builder *flatbuffers.Builder, Mapped uint64) { builder.PrependUint64Slot(3, Mapped, 0) }
func InfoAddMemAvailable(builder *flatbuffers.Builder, MemAvailable uint64) { builder.PrependUint64Slot(4, MemAvailable, 0) }
func InfoAddMemFree(builder *flatbuffers.Builder, MemFree uint64) { builder.PrependUint64Slot(5, MemFree, 0) }
func InfoAddMemTotal(builder *flatbuffers.Builder, MemTotal uint64) { builder.PrependUint64Slot(6, MemTotal, 0) }
func InfoAddSwapCached(builder *flatbuffers.Builder, SwapCached uint64) { builder.PrependUint64Slot(7, SwapCached, 0) }
func InfoAddSwapFree(builder *flatbuffers.Builder, SwapFree uint64) { builder.PrependUint64Slot(8, SwapFree, 0) }
func InfoAddSwapTotal(builder *flatbuffers.Builder, SwapTotal uint64) { builder.PrependUint64Slot(9, SwapTotal, 0) }
func InfoEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT { return builder.EndObject() }
