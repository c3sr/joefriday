// automatically generated by the FlatBuffers compiler, do not modify

package structs

import (
	flatbuffers "github.com/google/flatbuffers/go"
)
type Utilization struct {
	_tab flatbuffers.Table
}

func (rcv *Utilization) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Utilization) ID() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Utilization) Usage() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *Utilization) User() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *Utilization) Nice() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *Utilization) System() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *Utilization) Idle() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *Utilization) IOWait() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func UtilizationStart(builder *flatbuffers.Builder) { builder.StartObject(7) }
func UtilizationAddID(builder *flatbuffers.Builder, ID flatbuffers.UOffsetT) { builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(ID), 0) }
func UtilizationAddUsage(builder *flatbuffers.Builder, Usage float32) { builder.PrependFloat32Slot(1, Usage, 0.0) }
func UtilizationAddUser(builder *flatbuffers.Builder, User float32) { builder.PrependFloat32Slot(2, User, 0.0) }
func UtilizationAddNice(builder *flatbuffers.Builder, Nice float32) { builder.PrependFloat32Slot(3, Nice, 0.0) }
func UtilizationAddSystem(builder *flatbuffers.Builder, System float32) { builder.PrependFloat32Slot(4, System, 0.0) }
func UtilizationAddIdle(builder *flatbuffers.Builder, Idle float32) { builder.PrependFloat32Slot(5, Idle, 0.0) }
func UtilizationAddIOWait(builder *flatbuffers.Builder, IOWait float32) { builder.PrependFloat32Slot(6, IOWait, 0.0) }
func UtilizationEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT { return builder.EndObject() }
